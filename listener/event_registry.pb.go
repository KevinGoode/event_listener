// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event_registry.proto

package event_listener

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message .
type Handler struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	MessageId            string   `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	LastMessageNumber    uint64   `protobuf:"varint,4,opt,name=LastMessageNumber,proto3" json:"LastMessageNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Handler) Reset()         { *m = Handler{} }
func (m *Handler) String() string { return proto.CompactTextString(m) }
func (*Handler) ProtoMessage()    {}
func (*Handler) Descriptor() ([]byte, []int) {
	return fileDescriptor_00dfe5a5482fc9a0, []int{0}
}

func (m *Handler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Handler.Unmarshal(m, b)
}
func (m *Handler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Handler.Marshal(b, m, deterministic)
}
func (m *Handler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handler.Merge(m, src)
}
func (m *Handler) XXX_Size() int {
	return xxx_messageInfo_Handler.Size(m)
}
func (m *Handler) XXX_DiscardUnknown() {
	xxx_messageInfo_Handler.DiscardUnknown(m)
}

var xxx_messageInfo_Handler proto.InternalMessageInfo

func (m *Handler) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Handler) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Handler) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Handler) GetLastMessageNumber() uint64 {
	if m != nil {
		return m.LastMessageNumber
	}
	return 0
}

// The response message
type RegisterResponse struct {
	// 0 OK
	Response             int32    `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00dfe5a5482fc9a0, []int{1}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetResponse() int32 {
	if m != nil {
		return m.Response
	}
	return 0
}

func init() {
	proto.RegisterType((*Handler)(nil), "event_listener.Handler")
	proto.RegisterType((*RegisterResponse)(nil), "event_listener.RegisterResponse")
}

func init() { proto.RegisterFile("event_registry.proto", fileDescriptor_00dfe5a5482fc9a0) }

var fileDescriptor_00dfe5a5482fc9a0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xdd, 0x1a, 0xff, 0x74, 0x40, 0xd1, 0xa1, 0x6a, 0x28, 0x1e, 0x42, 0x4e, 0x39, 0x48,
	0x0e, 0xfa, 0x08, 0x22, 0x5a, 0xa8, 0x22, 0x5b, 0x7b, 0x96, 0x2d, 0x19, 0x4a, 0x20, 0xee, 0x96,
	0x99, 0xa9, 0xe0, 0x03, 0xf8, 0x0e, 0x3e, 0xae, 0x74, 0x9b, 0x56, 0xad, 0x47, 0xbd, 0xcd, 0x7c,
	0x1f, 0xfb, 0xed, 0xf7, 0x63, 0xa0, 0x47, 0xaf, 0xe4, 0xf5, 0x99, 0x69, 0x5a, 0x8b, 0xf2, 0x5b,
	0x39, 0xe3, 0xa0, 0x01, 0x0f, 0x97, 0x6a, 0x53, 0x8b, 0x92, 0x27, 0xce, 0xdf, 0x0d, 0xec, 0xdd,
	0x39, 0x5f, 0x35, 0xc4, 0x88, 0x90, 0x3c, 0x06, 0xd6, 0xd4, 0x64, 0xa6, 0x38, 0xb0, 0x71, 0xc6,
	0x3e, 0xec, 0x5f, 0x37, 0x35, 0x79, 0x1d, 0x54, 0x69, 0x27, 0x33, 0x45, 0xd7, 0xae, 0x77, 0x3c,
	0x87, 0xee, 0x3d, 0x89, 0xb8, 0x29, 0x0d, 0xaa, 0x74, 0x3b, 0x9a, 0x5f, 0x02, 0x5e, 0xc0, 0xf1,
	0xd0, 0x89, 0xb6, 0xc2, 0xc3, 0xfc, 0x65, 0x42, 0x9c, 0x26, 0x99, 0x29, 0x12, 0xfb, 0xdb, 0xc8,
	0x4b, 0x38, 0xb2, 0xb1, 0x29, 0xb1, 0x25, 0x99, 0x05, 0x2f, 0xb4, 0xf8, 0x9b, 0xdb, 0x39, 0x76,
	0xda, 0xb1, 0xeb, 0xfd, 0xf2, 0xa3, 0x03, 0xbd, 0xe5, 0x03, 0x76, 0x5a, 0x07, 0x3f, 0x6c, 0x81,
	0x70, 0xb4, 0xd2, 0x89, 0x6f, 0x16, 0xa8, 0x2b, 0xb8, 0xb3, 0xf2, 0x27, 0x79, 0xd9, 0x1a, 0xfd,
	0x6c, 0xd3, 0xd8, 0xec, 0x91, 0x6f, 0xe1, 0x13, 0x9c, 0xdc, 0x92, 0x7e, 0xcf, 0x1b, 0xa9, 0xd3,
	0xb9, 0xfc, 0x2d, 0x75, 0x0c, 0xa7, 0x63, 0xcf, 0xff, 0x5d, 0x76, 0xb2, 0x1b, 0x2f, 0x7d, 0xf5,
	0x19, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x05, 0xb9, 0x9d, 0x01, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationListenerClient is the client API for RegistrationListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationListenerClient interface {
	// Sends a command
	RegisterEventHandler(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetEventHandlerStatus(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error)
	UnregisterEventHandler(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registrationListenerClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationListenerClient(cc *grpc.ClientConn) RegistrationListenerClient {
	return &registrationListenerClient{cc}
}

func (c *registrationListenerClient) RegisterEventHandler(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/event_listener.RegistrationListener/RegisterEventHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationListenerClient) GetEventHandlerStatus(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/event_listener.RegistrationListener/GetEventHandlerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationListenerClient) UnregisterEventHandler(ctx context.Context, in *Handler, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/event_listener.RegistrationListener/UnregisterEventHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationListenerServer is the server API for RegistrationListener service.
type RegistrationListenerServer interface {
	// Sends a command
	RegisterEventHandler(context.Context, *Handler) (*RegisterResponse, error)
	GetEventHandlerStatus(context.Context, *Handler) (*RegisterResponse, error)
	UnregisterEventHandler(context.Context, *Handler) (*RegisterResponse, error)
}

func RegisterRegistrationListenerServer(s *grpc.Server, srv RegistrationListenerServer) {
	s.RegisterService(&_RegistrationListener_serviceDesc, srv)
}

func _RegistrationListener_RegisterEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationListenerServer).RegisterEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_listener.RegistrationListener/RegisterEventHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationListenerServer).RegisterEventHandler(ctx, req.(*Handler))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationListener_GetEventHandlerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationListenerServer).GetEventHandlerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_listener.RegistrationListener/GetEventHandlerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationListenerServer).GetEventHandlerStatus(ctx, req.(*Handler))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationListener_UnregisterEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationListenerServer).UnregisterEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_listener.RegistrationListener/UnregisterEventHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationListenerServer).UnregisterEventHandler(ctx, req.(*Handler))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistrationListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event_listener.RegistrationListener",
	HandlerType: (*RegistrationListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEventHandler",
			Handler:    _RegistrationListener_RegisterEventHandler_Handler,
		},
		{
			MethodName: "GetEventHandlerStatus",
			Handler:    _RegistrationListener_GetEventHandlerStatus_Handler,
		},
		{
			MethodName: "UnregisterEventHandler",
			Handler:    _RegistrationListener_UnregisterEventHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_registry.proto",
}
